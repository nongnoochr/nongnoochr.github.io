{"version":3,"sources":["components/Status/Status.module.css","containers/DisplayPanel/DisplayPanel.module.css","containers/ControlPanel/ControlPanel.module.css","components/Settings/Settings.module.css","components/UI/Loader/Loader.module.css","components/Summary/Summary.module.css","components/ControlButton/ControlButton.module.css","components/Layout/MainContainer/MainContainer.module.css","components/TimerSelector/TimerSelector.module.css","components/Layout/NavBar/NavBar.js","utils/TimeUtils.js","utils/SettingsUtils.js","components/Summary/Summary.js","store/actions/settings.js","store/actions/actionTypes.js","components/UI/Loader/Loader.js","components/Timer/Timer.js","components/Status/Status.js","store/actions/timer.js","containers/DisplayPanel/DisplayPanel.js","components/TimerSelector/TimerSelector.js","components/Settings/Settings.js","components/ControlButton/ControlButton.js","containers/ControlPanel/ControlPanel.js","components/Layout/MainContainer/MainContainer.js","components/Layout/Layout.js","App.js","serviceWorker.js","store/utility.js","store/reducers/timer.js","store/reducers/settings.js","index.js"],"names":["module","exports","navBar","props","Navbar","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","as","to","INIT_TIMER_DATA","hour","minute","second","getDurationData","ms","updateDurationTime","convertDurationDataToSeconds","data","origDurationData","newRawSecs","newTimeSecs","newRawMins","Math","floor","newTimeMins","getDurationString","durationStr","toFixed","convertNumTimeToString","num","numStr","length","SETTINGS_LABEL","SETTINGS_VALUES","Summary","settingsStr","lastRunTimeStr","this","duration","settings","join","lastActualDuration","settingsData","externalCtrl","Object","keys","map","key","classes","Alert","AlertContents","Component","connect","state","updateSettings","type","loader","dot","timer","current","Status","statusData","content","Standby","StatusText","Initializing","Loader","curProgress","curLabel","timerData","isrunning","msCurrent","ceil","Running","Timer","ProgressBarContainer","ProgressBar","animated","now","label","dispatch","onToggleStatus","DisplayPanel","_initData","startDate","Date","endDate","getTime","setMilliseconds","setState","start","computedEnd","_addMilliSecond","updatedTime","_startTimer","a","async","delay","actualEnd","timerstatus","diff","status","Container","DisplayElement","Card","Body","style","height","Header","Promise","res","setTimeout","TimerSelector","updatePropValue","ev","stateName","updatedData","target","value","onUpdateSettings","name","min","max","step","defaultValue","disabled","onChange","actions","Settings","showTimer","Form","Group","Row","controlId","Label","column","sm","Col","Check","checked","newVal","ButtonToolbar","ToggleButtonGroup","ToggleButton","display","TimeSelectorContainer","Button","onClick","onResetSettings","ControlButton","btnConfig","defaultClassName","icon","ButtonIcon","ControlPanel","opacity","mainContainer","contents","item","index","Panel","layout","NavBar","MainContainer","App","Layout","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","initTimerData","toggleStatus","action","newStatus","reducer","initSettings","updatedSettings","resetSettings","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","timerReducer","settingsReducer","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72d8f770.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Status\":\"Status_Status__18r35\",\"StatusText\":\"Status_StatusText__2isoA\",\"Standby\":\"Status_Standby__3C7PQ\",\"Initializing\":\"Status_Initializing__2Qqtx\",\"Running\":\"Status_Running__1y_nl\",\"ProgressBarContainer\":\"Status_ProgressBarContainer__3Gux2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"DisplayPanel_Container__285zM\",\"DisplayElement\":\"DisplayPanel_DisplayElement__3afS8\",\"Summary\":\"DisplayPanel_Summary__2ewc5\",\"Status\":\"DisplayPanel_Status__2URGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ControlPanel_Container__qnkq1\",\"DisplayElement\":\"ControlPanel_DisplayElement__2h3sc\",\"Settings\":\"ControlPanel_Settings__1ZOo6\",\"ControlButton\":\"ControlPanel_ControlButton__2Oa9-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"Settings_Label__3eKuP\",\"TimeSelectorContainer\":\"Settings_TimeSelectorContainer__27_OR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading-animation-container\":\"Loader_loading-animation-container__2M4Ci\",\"dot\":\"Loader_dot__2wAQQ\",\"bounce\":\"Loader_bounce__3a78I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AlertContents\":\"Summary_AlertContents__yj2hY\",\"Summary\":\"Summary_Summary__3T0TE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ControlButton\":\"ControlButton_ControlButton__376PQ\",\"ButtonIcon\":\"ControlButton_ButtonIcon__2CN2X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"MainContainer_Container__1w31R\",\"Panel\":\"MainContainer_Panel__nSoDg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimerSelector\":\"TimerSelector_TimerSelector__1SvwW\"};","import React from 'react';\n\nimport { \n    Navbar, \n    Nav\n} from 'react-bootstrap';\n\n// See\n// https://stackoverflow.com/questions/54843302/reactjs-bootstrap-navbar-and-routing-not-working-together\nimport { Link } from 'react-router-dom';\n\n\nconst navBar = (props) => (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">RPi machine</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n            <Nav.Link href=\"#link\">Link</Nav.Link>\n            </Nav>\n        </Navbar.Collapse>\n        </Navbar>\n);\n\nexport default navBar;\n","// Constants\n\nexport const INIT_TIMER_DATA = {\n    hour:   0,\n    minute: 0,\n    second: 0\n}\n\n// ---------------\nexport const getDurationData = (ms) => {\n    return updateDurationTime(INIT_TIMER_DATA, ms);\n}\n\nexport const convertDurationDataToSeconds = (data) => {\n    const ms = 3600*data.hour\n        + 60*data.minute\n        + data.second;\n\n    return ms;\n}\n\nexport const updateDurationTime = (origDurationData, ms) => {\n    // Add a specified duration (in milliseconds) to a given duration data\n\n    // See\n    // https://jsfiddle.net/Daniel_Hug/pvk6p/\n\n    const origDurationSecs = convertDurationDataToSeconds(origDurationData);\n\n    const newRawSecs = origDurationSecs + ms/1000;\n    const newTimeSecs = newRawSecs % 60;\n\n    const newRawMins = Math.floor(newRawSecs / 60);\n    const newTimeMins = newRawMins % 60;\n\n    const newTimeHrs = Math.floor(newRawMins / 60);\n\n    return {\n        hour:   newTimeHrs,\n        minute: newTimeMins,\n        second: newTimeSecs\n    };\n}\n\nexport const getDurationString = (ms) => {\n\n    const data = getDurationData(ms);\n    let durationStr = '';\n    if (data.hour > 0) {\n        durationStr = durationStr + data.hour.toFixed() + ' hrs ';\n    }\n\n    if (data.minute > 0) {\n        durationStr = durationStr + data.minute.toFixed() + ' mins ';\n    }\n\n    if (data.second > 0) {\n        durationStr = durationStr + data.second.toFixed() + ' secs ';\n    }\n\n    return durationStr;\n}\n\n\nexport const getTimerString = (data) => {\n    // convert the input duration data to string\n        \n    const hr = convertNumTimeToString(data.hour);\n    const min = convertNumTimeToString(data.minute);\n    const sec = convertNumTimeToString(data.second);\n    \n    return hr + ':' + min + ':' + sec;\n};\n// --------------\n// Local Helpers\n// --------------\nconst convertNumTimeToString = (num) => {\n    let numStr = num.toFixed();\n    if (numStr.length === 1) {\n        numStr = '0' + numStr;\n    }\n    return numStr;\n};","export const SETTINGS_LABEL = {\n    externalCtrl:   'External Controller',\n    settings:       'Settings',\n    duration:       'Duration',\n};\n\nexport const SETTINGS_VALUES = {\n    setting1:   'LED1',\n    setting2:   'LED2'\n};\n","import React, {Fragment, Component} from 'react';\nimport classes from './Summary.module.css';\n\nimport { connect } from 'react-redux';\n\nimport Alert from 'react-bootstrap/Alert'\n\nimport { WiRaindrop, WiThermometer } from \"react-icons/wi\";\n\nimport { \n    getDurationString\n} from '../../utils/TimeUtils';\n\nimport { SETTINGS_LABEL } from '../../utils/SettingsUtils';\n\nclass Summary extends Component {\n    render () {\n        let durationStr;\n        if (this.props.data.duration) {\n            durationStr = getDurationString(this.props.data.duration);\n        } else {\n            durationStr = 'N/A';\n        }\n\n        let settingsStr;\n        if (this.props.settings.settings.length > 0) {\n            settingsStr = this.props.settings.settings.join('+');\n        } else {\n            settingsStr = 'None'\n        }\n        \n\n        let lastRunTimeStr;\n        if (this.props.data.lastActualDuration) {\n            lastRunTimeStr = getDurationString(this.props.data.lastActualDuration);\n        } else {\n            lastRunTimeStr = 'N/A';\n        }\n\n        const settingsData = {\n            [SETTINGS_LABEL.externalCtrl]:  this.props.settings.externalCtrl ? 'Enabled' : 'Disabled',\n            [SETTINGS_LABEL.settings]:      settingsStr,\n            [SETTINGS_LABEL.duration]:      durationStr,\n            'Last RunTime Duration':        lastRunTimeStr \n        };\n\n        const settings = Object.keys(settingsData).map((key) => (\n            <Fragment key={key}>\n                <div className=\"col-5\">\n                    <label>{key}</label>\n                </div>\n                <div className=\"col-7\">\n                    {settingsData[key]}\n                </div>\n            </Fragment>\n            \n        ));\n\n        return (\n            <div className={classes.Summary}>\n                <Alert \n                    variant=\"primary\"\n                    className={classes.AlertContents}\n                    >\n                    <div><WiThermometer /><label>Temperature:</label> 20 <span>&#8451;</span></div>\n                    <div><WiRaindrop /><label>Humidity:</label> 5%</div>\n                </Alert>\n\n                <div className=\"row\">\n                    {settings}\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        settings: state.settings\n    };\n};\n\nexport default connect(mapStateToProps)(Summary);\n","import * as actionTypes from './actionTypes';\n\nexport const updateSettings = (settings) => {\n    return {\n        type: actionTypes.UPDATE_SETTINGS,\n        settings: settings\n    }\n}\n\nexport const resetSettings = () => {\n    return {\n        type: actionTypes.RESET_SETTINGS\n    }\n}","export const TOGGLE_STATUS = 'TOGGLE_STATUS';\n\nexport const UPDATE_SETTINGS = 'UPDATE_SETTINGS';\nexport const RESET_SETTINGS = 'RESET_SETTINGS';","import React from 'react';\nimport classes from './Loader.module.css';\n\nconst loader = (props) => (\n    <div className={classes['loading-animation-container']}>\n        <div className={classes.dot}></div>\n        <div className={classes.dot}></div>\n        <div className={classes.dot}></div>\n    </div>\n);\n\nexport default loader;\n","import React from 'react';\nimport { getTimerString } from '../../utils/TimeUtils';\n\nconst timer = (props) => {\n\n    return (\n        <div>\n            {getTimerString(props.data.current)}\n        </div>\n    );\n}\n\nexport default timer;\n","import React, {Component, Fragment} from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nimport classes from './Status.module.css';\nimport Loader from '../UI/Loader/Loader';\nimport Timer from '../Timer/Timer';\n\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport { FiPower } from \"react-icons/fi\";\n\nimport { convertDurationDataToSeconds } from '../../utils/TimeUtils';\n\nclass Status extends Component {\n\n\n    render () {\n\n        let statusData = {\n            className: '',\n            content: null,\n        };\n        \n        switch (this.props.state) {\n            case 'standby':\n                statusData = {\n                    className: classes.Standby,\n                    content: (<Fragment>\n                        <div className={classes.StatusText}>Standby</div>\n                        <div><FiPower /></div>\n                    </Fragment>) \n                }\n                break;\n\n            case 'initialize':\n                statusData = {\n                    className: classes.Initializing,\n                    content: (<Fragment>\n                        <div className={classes.StatusText}>Initializing</div>\n                        <Loader />                    \n                    </Fragment>) \n                }\n                break;\n\n            case 'running':\n                const timerData = {\n                    isrunning:  this.props.isrunning,\n                    current:    {\n                        ...this.props.data.current\n                    }\n                };\n\n                let curProgress, curLabel;\n                if (this.props.data.duration) {\n                    const msCurrent = convertDurationDataToSeconds(this.props.data.current) * 1000;\n                    curProgress = Math.ceil((msCurrent / this.props.data.duration) * 100);\n                    curLabel = `${curProgress}%`;\n\n                } else {\n                    curProgress = 100;\n                    curLabel = 'In progress...';\n                }\n                \n\n                statusData = {\n                    className: classes.Running,\n                    content: (<Fragment>\n                        <div className={classes.StatusText}>Running</div>\n                        <Timer data={timerData} />\n                        <div className={classes.ProgressBarContainer}>\n                            <ProgressBar animated \n                                now={curProgress} \n                                label={curLabel}\n                                />\n                        </div>\n                    </Fragment>) \n                }\n                break;\n\n            default:\n                    // do nothing\n        }\n            \n\n        return (\n            <div className={['box-border', classes.Status, statusData.className].join(' ')}>\n                {statusData.content}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isrunning: state.timer.isrunning\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onToggleStatus: (settings) => dispatch(actions.toggleStatus())\n    };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Status);","import * as actionTypes from './actionTypes';\n\nexport const toggleStatus = () => {\n    return {\n        type: actionTypes.TOGGLE_STATUS\n    }\n}","import React, { Component } from 'react';\nimport classes from './DisplayPanel.module.css';\n\nimport Summary from '../../components/Summary/Summary';\nimport Status from '../../components/Status/Status';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nimport { \n    INIT_TIMER_DATA, \n    convertDurationDataToSeconds,\n    updateDurationTime \n} from '../../utils/TimeUtils';\n\nimport Card from 'react-bootstrap/Card';\n\nclass DisplayPanel extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            start:  null,\n            computedEnd:    null,\n            actualEnd:      null,\n            current: {\n                ...INIT_TIMER_DATA\n            },\n\n            timerstatus: false,\n    \n            // duration in milli-seconds\n            lastActualDuration: null\n            \n        }\n        \n    }\n\n    componentDidMount () {\n        this._initData();\n    }\n\n    componentDidUpdate () {\n\n        // If the START button is clicked but the timer has not been started\n        if (this.props.isrunning && !this.state.timerstatus) {\n            // Start the timer\n            this._startTimer();\n\n            // and set the state of the timer to true\n            this.setState({\n                timerstatus: true\n            })\n        }\n\n        // If the STOP button is clicked while the timer is running\n        if (!this.props.isrunning && this.state.timerstatus) {\n\n            // reset the state of the timer\n\n            const actualEnd = new Date();\n            const diff = (actualEnd - this.state.start);\n\n            this.setState({\n                actualEnd:          actualEnd,\n                lastActualDuration: diff,\n                timerstatus:        false\n            });\n\n        }\n    }\n\n    render () {\n        const duration = this.props.duration;\n\n        const status = this.props.isrunning ?\n            'running' : 'standby';\n\n        return (\n            <div className={classes.Container}>\n                <div className={[classes.DisplayElement, classes.Summary].join(' ')}>\n                    <Card>\n                        <Card.Body>\n                            <Summary data={ {\n                                duration: duration,\n                                lastActualDuration: this.state.lastActualDuration \n                                }} />\n                        </Card.Body>\n                    </Card>\n                </div>\n                \n                <div className={[classes.DisplayElement, classes.Status].join(' ')}>\n                    <Card className=\"text-center\"\n                        style={{height: '100%'}}>\n                        <Card.Header><strong>STATUS</strong></Card.Header>\n                        <Card.Body>\n                                <Status state={status} data={\n                                    { \n                                        current: this.state.current,\n                                        duration: duration\n                                    }\n                                } />\n                        </Card.Body>\n\n                    </Card>\n\n                </div>\n                \n                \n            </div>\n        );\n    }\n\n    // --- Private methods\n    _initData = () => {\n\n        let startDate = new Date();\n        let endDate = null;\n        \n        if (this.props.duration) {\n            endDate = new Date(startDate.getTime());\n            endDate.setMilliseconds(this.props.duration);\n        }\n\n        this.setState({\n            start:              startDate,\n            computedEnd:        endDate,\n            current:    {\n                ...INIT_TIMER_DATA\n            }\n        });\n    }\n\n    _addMilliSecond = (ms) => {\n\n        const updatedTime = updateDurationTime(this.state.current, ms);\n\n        // Update time\n        this.setState({current: updatedTime});\n    }\n\n    _startTimer = () => {\n        \n        // https://stackoverflow.com/questions/14226803/wait-5-seconds-before-executing-next-line/28173606\n\n        const addMilliSecond = async () => {\n\n            // Reset the counter first before start\n            this._initData();\n            \n            while (this.props.isrunning) {\n\n                // Check whether the current time exceeds the duration\n                if (this.props.duration) {\n\n                    const deltaTime = convertDurationDataToSeconds(this.state.current) * 1000;\n\n                    if (deltaTime >= this.props.duration) {\n                        this.props.onToggleStatus();\n                        break;\n                    }\n                }\n                \n                await delay(250);\n                this._addMilliSecond(250);\n            }\n        };\n\n        addMilliSecond();\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isrunning:  state.timer.isrunning,\n        duration:   state.settings.duration\n    };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onToggleStatus: () => dispatch(actions.toggleStatus())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayPanel);\n\n\n// --- Heler functions\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n","import React, { Component } from 'react';\nimport classes from './TimerSelector.module.css';\nimport { \n    convertDurationDataToSeconds,\n    getDurationData\n} from '../../utils/TimeUtils'\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nclass TimerSelector extends Component {\n\n\n    updatePropValue = (ev, stateName) => {\n\n\n        const updatedData = {\n            hour:   this.props.hour,\n            minute: this.props.minute,\n            second: this.props.second\n        };\n        updatedData[stateName] = +ev.target.value;\n\n        const durationSeconds = convertDurationDataToSeconds(updatedData);\n        const duration = durationSeconds * 1000;\n        this.props.onUpdateSettings({\n            duration: duration\n        })\n    }\n\n    render () {\n        return (\n            <div className={classes.TimerSelector}>\n                <div>\n                    <input \n                        type=\"number\" \n                        name=\"hour\" \n                        min=\"0\" \n                        max=\"999\"\n                        step=\"1\"\n                        defaultValue={this.props.hour}\n                        disabled={this.props.disabled}\n                        onChange={(ev) => this.updatePropValue(ev, 'hour')} /> Hours \n                </div>\n                <div>\n                    <input \n                        type=\"number\" \n                        name=\"minute\" \n                        min=\"0\" \n                        max=\"60\" \n                        step=\"1\"\n                        defaultValue={this.props.minute}\n                        disabled={this.props.disabled}\n                        onChange={(ev) => this.updatePropValue(ev, 'minute')} /> Minutes \n                </div>\n                <div>\n                    <input \n                        type=\"number\" \n                        name=\"second\" \n                        min=\"0\" \n                        max=\"60\"\n                        step=\"1\" \n                        defaultValue={this.props.second}\n                        disabled={this.props.disabled}\n                        onChange={(ev) => this.updatePropValue(ev, 'second')} /> Seconds \n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = state => {\n    const duration = state.settings.duration;\n    const timerData = getDurationData(duration);\n    return {\n        duration: duration,\n        ...timerData\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUpdateSettings: (settings) => dispatch(actions.updateSettings(settings))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TimerSelector);\n","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nimport classes from './Settings.module.css';\nimport {\n    SETTINGS_LABEL, \n    SETTINGS_VALUES\n} from '../../utils/SettingsUtils';\n\nimport {\n    Col,\n    Form, \n    Row,\n    ButtonToolbar,\n    Button,\n    ToggleButtonGroup,\n    ToggleButton\n} from 'react-bootstrap';\n\nimport TimerSelector from '../TimerSelector/TimerSelector';\n\nimport { MdSettings } from \"react-icons/md\";\n\n\nclass Settings extends Component {\n\n    state = {\n        showTimer: false\n    }\n\n    render () {\n        return (\n            <div className={classes.Settings}>\n                <Form>\n                    <fieldset>\n                    <legend>\n                        <MdSettings />\n                        Configurations\n                    </legend>\n\n                        <Form.Group as={Row} controlId=\"externalCtrlForm\">\n                            <Form.Label \n                                className={classes.Label}\n                                column sm={6}>\n                                {SETTINGS_LABEL.externalCtrl}\n                            </Form.Label>\n                            <Col sm={6}>\n                                    \n                                    <Form.Check \n                                            type=\"switch\"\n                                            id=\"switch-ext-ctrl\"\n                                            label=\"\" \n                                            checked={this.props.settings.externalCtrl}\n                                            disabled={this.props.isrunning}\n                                            onChange={ (ev) => {\n\n                                                const newVal = ev.target.checked;\n                                                this.props.onUpdateSettings({\n                                                    externalCtrl: newVal\n                                                });\n                                            } }\n                                        />\n                            </Col>\n                        </Form.Group>\n                        \n                        <Form.Group as={Row} controlId=\"settingsForm\">\n                            <Form.Label \n                                className={classes.Label}\n                                column sm={6}>\n                                {SETTINGS_LABEL.settings}\n                            </Form.Label>\n                            <Col sm={6}>\n                            <ButtonToolbar>\n                                <ToggleButtonGroup \n                                    type=\"checkbox\" \n                                    value={this.props.settings.settings}\n                                    onChange={(settings) => {\n                                        this.props.onUpdateSettings({\n                                            settings: settings\n                                        });\n                                    }}\n                                    >\n                                        <ToggleButton \n                                            value={SETTINGS_VALUES.setting1}\n                                            variant=\"outline-primary\" \n                                            disabled={this.props.isrunning}>\n                                                {SETTINGS_VALUES.setting1}\n                                        </ToggleButton>\n                                        <ToggleButton \n                                            value={SETTINGS_VALUES.setting2}\n                                            variant=\"outline-primary\" \n                                            disabled={this.props.isrunning}>\n                                                {SETTINGS_VALUES.setting2}\n                                        </ToggleButton>\n                                </ToggleButtonGroup>\n                            </ButtonToolbar>\n                            </Col>\n                        </Form.Group>\n                        \n                        <Form.Group as={Row} controlId=\"durationForm\">\n                            <Form.Label \n                                className={classes.Label}\n                                column sm={6}>\n                                {SETTINGS_LABEL.duration}\n                            </Form.Label>\n                            <Col sm={6}>\n                                    \n                                    <Form.Check \n                                            type=\"switch\"\n                                            id=\"switch-duration\"\n                                            label=\"\"\n                                            checked={this.state.showTimer}\n                                            disabled={this.props.isrunning}\n                                            onChange={(ev) => {\n                                                this.setState({showTimer: ev.target.checked})\n                                            }}\n                                        />\n                            </Col>\n                            <div \n                                style={{ display: this.state.showTimer ? null : \"none\" }}\n                                className={classes.TimeSelectorContainer}\n                                >\n                                <TimerSelector disabled={this.props.isrunning} />\n                            </div>\n                        </Form.Group>\n\n                        <Button \n                            variant=\"outline-info\"\n                            onClick={() => {\n                                this.props.onResetSettings();\n                                this.setState({\n                                    showTimer: false\n                                })\n                            }}\n                            >RESET</Button>\n\n                    </fieldset>\n                </Form>\n            </div>\n            \n        );\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        isrunning: state.timer.isrunning,\n        settings: state.settings\n    };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUpdateSettings: (settings) => dispatch(actions.updateSettings(settings)),\n        onResetSettings: () => dispatch(actions.resetSettings())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nimport { MdPlayCircleOutline, MdStop } from \"react-icons/md\";\nimport classes from './ControlButton.module.css';\n\n\nclass ControlButton extends Component {\n    render () {\n\n        let defaultClassName = \"btn btn-lg btn-block \";\n        let btnConfig = null;\n\n        // If the Timer is currently running\n        if (this.props.isrunning) {\n            // Show a START button\n\n            btnConfig = {\n                className:  defaultClassName + 'btn-danger',\n                label:      'Press to STOP',\n                icon:       (<MdStop />)\n            };\n\n        } else {\n            // otherwise, show a STOP button\n            \n            btnConfig = {\n                className:  defaultClassName + 'btn-primary',\n                label:      'Press to START',\n                icon:       (<MdPlayCircleOutline />)\n            };\n        }\n\n        return (\n            <div className={classes.ControlButton}>\n                <button \n                    type=\"button\" \n                    className={btnConfig.className}\n                    style={{height: '100%'}}\n                    onClick={() => this.props.onToggleStatus()}\n                    >\n                        <div>\n                            <div className={classes.ButtonIcon}>\n                            {btnConfig.icon}\n                            </div>\n                            <div>{btnConfig.label}</div>\n                        </div>\n                        \n                </button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isrunning: state.timer.isrunning\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onToggleStatus: () => dispatch(actions.toggleStatus())\n    };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlButton);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport classes from './ControlPanel.module.css';\n\nimport Settings from '../../components/Settings/Settings';\nimport ControlButton from '../../components/ControlButton/ControlButton';\nimport Card from 'react-bootstrap/Card';\n\nclass ControlPanel extends Component {\n\n    render () {\n        return (\n            <Card>\n                <Card.Body>\n                    <div className={classes.Container}>\n                        <div \n                            style={{\n                                opacity: this.props.isrunning ? 0.4 : null\n                            }} \n                            className={[classes.Settings, classes.DisplayElement].join(' ')}>\n                                <Card>\n                                    <Card.Body>\n                                    <Settings />\n                                    </Card.Body>\n                                </Card>\n                            \n                        </div>\n                        <div className={[classes.ControlButton, classes.DisplayElement].join(' ')}>\n                            <ControlButton/>\n                        </div>\n                </div>\n\n                </Card.Body>\n            </Card>\n            \n        );\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        isrunning: state.timer.isrunning\n    };\n};\n\nexport default connect(mapStateToProps)(ControlPanel);\n","import React from 'react';\nimport DisplayPanel from '../../../containers/DisplayPanel/DisplayPanel';\nimport ControlPanel from '../../../containers/ControlPanel/ControlPanel';\n\nimport classes from './MainContainer.module.css';\n\nconst mainContainer = (props) => {\n    \n    const contents = [<DisplayPanel />, <ControlPanel />].map((item, index) => (\n        <div key={index} className={classes.Panel}>\n            {item}\n        </div>\n    ));\n\n    return (\n        <div className={[\"container-fluid\", classes.Container].join(' ')}>\n            {contents}\n        </div>\n    );\n};\n\nexport default mainContainer;","import React from 'react';\nimport NavBar from './NavBar/NavBar';\nimport MainContainer from './MainContainer/MainContainer';\n\nconst layout = (props) => (\n    <div>\n        <NavBar />\n        <MainContainer />\n    </div>\n);\n\nexport default layout;","import React from 'react';\nimport Layout from './components/Layout/Layout';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div>\n      <Layout />\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    };\n};","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\n\nconst TIMER_SETTINGS = {\n\n    isrunning:  false,\n    \n    // duration in milli-seconds\n    duration:   0\n};\n\nconst initTimerData = {\n    ...TIMER_SETTINGS\n};\n\nconst toggleStatus = (state, action) => {\n    const newStatus = !state.isrunning;\n\n    return updateObject(state, {\n        isrunning:  newStatus\n    });\n};\n\n\n// --------------------\nconst reducer = ( state = initTimerData, action ) => {\n    switch ( action.type ) {\n        case actionTypes.TOGGLE_STATUS: \n            return toggleStatus( state, action );\n\n            default: return state;\n    }\n};\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nimport {\n    SETTINGS_VALUES\n} from '../../utils/SettingsUtils';\n\nconst initSettings = {\n    externalCtrl:   false,\n    settings:       [SETTINGS_VALUES.setting1, SETTINGS_VALUES.setting2],\n    duration:       0\n};\n\nconst updateSettings = (state, action) => {\n    const updatedSettings = {\n        ...action.settings\n    }\n    return updateObject(state, {\n        ...updatedSettings\n    });\n};\n\nconst resetSettings = (state, action) => {\n    return updateObject(state, {\n        ...initSettings\n    });\n}\n\n// --------------------\nconst reducer = ( state = initSettings, action ) => {\n    switch ( action.type ) {\n        case actionTypes.UPDATE_SETTINGS: \n            return updateSettings( state, action );\n\n        case actionTypes.RESET_SETTINGS: \n            return resetSettings( state, action );\n\n        default: return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from'redux-thunk';\n\nimport timerReducer from './store/reducers/timer';\nimport settingsReducer from './store/reducers/settings';\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n    timer: timerReducer,\n    settings: settingsReducer\n});\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n    \n);\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}